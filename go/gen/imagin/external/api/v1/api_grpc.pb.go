// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: imagin/external/api/v1/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImaginService_Version_FullMethodName       = "/imagin.external.api.v1.ImaginService/Version"
	ImaginService_AddFileStream_FullMethodName = "/imagin.external.api.v1.ImaginService/AddFileStream"
	ImaginService_GetFileStream_FullMethodName = "/imagin.external.api.v1.ImaginService/GetFileStream"
	ImaginService_AddFile_FullMethodName       = "/imagin.external.api.v1.ImaginService/AddFile"
	ImaginService_GetFile_FullMethodName       = "/imagin.external.api.v1.ImaginService/GetFile"
	ImaginService_AddDag_FullMethodName        = "/imagin.external.api.v1.ImaginService/AddDag"
	ImaginService_GetDag_FullMethodName        = "/imagin.external.api.v1.ImaginService/GetDag"
	ImaginService_GetDags_FullMethodName       = "/imagin.external.api.v1.ImaginService/GetDags"
)

// ImaginServiceClient is the client API for ImaginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImaginServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// Content data requests
	AddFileStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AddFileStreamRequest, AddFileStreamResponse], error)
	GetFileStream(ctx context.Context, in *GetFileStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileStreamResponse], error)
	AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	AddDag(ctx context.Context, in *AddDagRequest, opts ...grpc.CallOption) (*AddDagResponse, error)
	GetDag(ctx context.Context, in *GetDagRequest, opts ...grpc.CallOption) (*GetDagResponse, error)
	GetDags(ctx context.Context, in *GetDagsRequest, opts ...grpc.CallOption) (*GetDagsResponse, error)
}

type imaginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImaginServiceClient(cc grpc.ClientConnInterface) ImaginServiceClient {
	return &imaginServiceClient{cc}
}

func (c *imaginServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, ImaginService_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) AddFileStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AddFileStreamRequest, AddFileStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImaginService_ServiceDesc.Streams[0], ImaginService_AddFileStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AddFileStreamRequest, AddFileStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImaginService_AddFileStreamClient = grpc.ClientStreamingClient[AddFileStreamRequest, AddFileStreamResponse]

func (c *imaginServiceClient) GetFileStream(ctx context.Context, in *GetFileStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImaginService_ServiceDesc.Streams[1], ImaginService_GetFileStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileStreamRequest, GetFileStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImaginService_GetFileStreamClient = grpc.ServerStreamingClient[GetFileStreamResponse]

func (c *imaginServiceClient) AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFileResponse)
	err := c.cc.Invoke(ctx, ImaginService_AddFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) AddDag(ctx context.Context, in *AddDagRequest, opts ...grpc.CallOption) (*AddDagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDagResponse)
	err := c.cc.Invoke(ctx, ImaginService_AddDag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetDag(ctx context.Context, in *GetDagRequest, opts ...grpc.CallOption) (*GetDagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDagResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetDag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetDags(ctx context.Context, in *GetDagsRequest, opts ...grpc.CallOption) (*GetDagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDagsResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetDags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImaginServiceServer is the server API for ImaginService service.
// All implementations must embed UnimplementedImaginServiceServer
// for forward compatibility.
type ImaginServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// Content data requests
	AddFileStream(grpc.ClientStreamingServer[AddFileStreamRequest, AddFileStreamResponse]) error
	GetFileStream(*GetFileStreamRequest, grpc.ServerStreamingServer[GetFileStreamResponse]) error
	AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error)
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	AddDag(context.Context, *AddDagRequest) (*AddDagResponse, error)
	GetDag(context.Context, *GetDagRequest) (*GetDagResponse, error)
	GetDags(context.Context, *GetDagsRequest) (*GetDagsResponse, error)
	mustEmbedUnimplementedImaginServiceServer()
}

// UnimplementedImaginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImaginServiceServer struct{}

func (UnimplementedImaginServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedImaginServiceServer) AddFileStream(grpc.ClientStreamingServer[AddFileStreamRequest, AddFileStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddFileStream not implemented")
}
func (UnimplementedImaginServiceServer) GetFileStream(*GetFileStreamRequest, grpc.ServerStreamingServer[GetFileStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFileStream not implemented")
}
func (UnimplementedImaginServiceServer) AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedImaginServiceServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedImaginServiceServer) AddDag(context.Context, *AddDagRequest) (*AddDagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDag not implemented")
}
func (UnimplementedImaginServiceServer) GetDag(context.Context, *GetDagRequest) (*GetDagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDag not implemented")
}
func (UnimplementedImaginServiceServer) GetDags(context.Context, *GetDagsRequest) (*GetDagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDags not implemented")
}
func (UnimplementedImaginServiceServer) mustEmbedUnimplementedImaginServiceServer() {}
func (UnimplementedImaginServiceServer) testEmbeddedByValue()                       {}

// UnsafeImaginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImaginServiceServer will
// result in compilation errors.
type UnsafeImaginServiceServer interface {
	mustEmbedUnimplementedImaginServiceServer()
}

func RegisterImaginServiceServer(s grpc.ServiceRegistrar, srv ImaginServiceServer) {
	// If the following call pancis, it indicates UnimplementedImaginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImaginService_ServiceDesc, srv)
}

func _ImaginService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_AddFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImaginServiceServer).AddFileStream(&grpc.GenericServerStream[AddFileStreamRequest, AddFileStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImaginService_AddFileStreamServer = grpc.ClientStreamingServer[AddFileStreamRequest, AddFileStreamResponse]

func _ImaginService_GetFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImaginServiceServer).GetFileStream(m, &grpc.GenericServerStream[GetFileStreamRequest, GetFileStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImaginService_GetFileStreamServer = grpc.ServerStreamingServer[GetFileStreamResponse]

func _ImaginService_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_AddFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).AddFile(ctx, req.(*AddFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_AddDag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).AddDag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_AddDag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).AddDag(ctx, req.(*AddDagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetDag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetDag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetDag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetDag(ctx, req.(*GetDagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetDags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetDags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetDags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetDags(ctx, req.(*GetDagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImaginService_ServiceDesc is the grpc.ServiceDesc for ImaginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImaginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imagin.external.api.v1.ImaginService",
	HandlerType: (*ImaginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ImaginService_Version_Handler,
		},
		{
			MethodName: "AddFile",
			Handler:    _ImaginService_AddFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _ImaginService_GetFile_Handler,
		},
		{
			MethodName: "AddDag",
			Handler:    _ImaginService_AddDag_Handler,
		},
		{
			MethodName: "GetDag",
			Handler:    _ImaginService_GetDag_Handler,
		},
		{
			MethodName: "GetDags",
			Handler:    _ImaginService_GetDags_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddFileStream",
			Handler:       _ImaginService_AddFileStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFileStream",
			Handler:       _ImaginService_GetFileStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "imagin/external/api/v1/api.proto",
}
