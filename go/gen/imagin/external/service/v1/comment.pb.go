// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: imagin/external/service/v1/comment.proto

package service

import (
	v1 "github.com/imaginapp/proto_core/go/gen/imagin/external/message/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentRequest) Reset() {
	*x = GetCommentRequest{}
	mi := &file_imagin_external_service_v1_comment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentRequest) ProtoMessage() {}

func (x *GetCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imagin_external_service_v1_comment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentRequest.ProtoReflect.Descriptor instead.
func (*GetCommentRequest) Descriptor() ([]byte, []int) {
	return file_imagin_external_service_v1_comment_proto_rawDescGZIP(), []int{0}
}

func (x *GetCommentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCommentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       *v1.Comment            `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentResponse) Reset() {
	*x = GetCommentResponse{}
	mi := &file_imagin_external_service_v1_comment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentResponse) ProtoMessage() {}

func (x *GetCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_imagin_external_service_v1_comment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentResponse.ProtoReflect.Descriptor instead.
func (*GetCommentResponse) Descriptor() ([]byte, []int) {
	return file_imagin_external_service_v1_comment_proto_rawDescGZIP(), []int{1}
}

func (x *GetCommentResponse) GetComment() *v1.Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type GetCommentRawRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentRawRequest) Reset() {
	*x = GetCommentRawRequest{}
	mi := &file_imagin_external_service_v1_comment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentRawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentRawRequest) ProtoMessage() {}

func (x *GetCommentRawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imagin_external_service_v1_comment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentRawRequest.ProtoReflect.Descriptor instead.
func (*GetCommentRawRequest) Descriptor() ([]byte, []int) {
	return file_imagin_external_service_v1_comment_proto_rawDescGZIP(), []int{2}
}

func (x *GetCommentRawRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCommentRawResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Raw           *v1.CommentRaw         `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentRawResponse) Reset() {
	*x = GetCommentRawResponse{}
	mi := &file_imagin_external_service_v1_comment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentRawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentRawResponse) ProtoMessage() {}

func (x *GetCommentRawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_imagin_external_service_v1_comment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentRawResponse.ProtoReflect.Descriptor instead.
func (*GetCommentRawResponse) Descriptor() ([]byte, []int) {
	return file_imagin_external_service_v1_comment_proto_rawDescGZIP(), []int{3}
}

func (x *GetCommentRawResponse) GetRaw() *v1.CommentRaw {
	if x != nil {
		return x.Raw
	}
	return nil
}

var File_imagin_external_service_v1_comment_proto protoreflect.FileDescriptor

const file_imagin_external_service_v1_comment_proto_rawDesc = "" +
	"\n" +
	"(imagin/external/service/v1/comment.proto\x12\x1aimagin.external.service.v1\x1a(imagin/external/message/v1/comment.proto\"#\n" +
	"\x11GetCommentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"S\n" +
	"\x12GetCommentResponse\x12=\n" +
	"\acomment\x18\x01 \x01(\v2#.imagin.external.message.v1.CommentR\acomment\"&\n" +
	"\x14GetCommentRawRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"Q\n" +
	"\x15GetCommentRawResponse\x128\n" +
	"\x03raw\x18\x01 \x01(\v2&.imagin.external.message.v1.CommentRawR\x03rawBKZIgithub.com/imaginapp/proto_core/go/gen/imagin/external/service/v1;serviceb\x06proto3"

var (
	file_imagin_external_service_v1_comment_proto_rawDescOnce sync.Once
	file_imagin_external_service_v1_comment_proto_rawDescData []byte
)

func file_imagin_external_service_v1_comment_proto_rawDescGZIP() []byte {
	file_imagin_external_service_v1_comment_proto_rawDescOnce.Do(func() {
		file_imagin_external_service_v1_comment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_imagin_external_service_v1_comment_proto_rawDesc), len(file_imagin_external_service_v1_comment_proto_rawDesc)))
	})
	return file_imagin_external_service_v1_comment_proto_rawDescData
}

var file_imagin_external_service_v1_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_imagin_external_service_v1_comment_proto_goTypes = []any{
	(*GetCommentRequest)(nil),     // 0: imagin.external.service.v1.GetCommentRequest
	(*GetCommentResponse)(nil),    // 1: imagin.external.service.v1.GetCommentResponse
	(*GetCommentRawRequest)(nil),  // 2: imagin.external.service.v1.GetCommentRawRequest
	(*GetCommentRawResponse)(nil), // 3: imagin.external.service.v1.GetCommentRawResponse
	(*v1.Comment)(nil),            // 4: imagin.external.message.v1.Comment
	(*v1.CommentRaw)(nil),         // 5: imagin.external.message.v1.CommentRaw
}
var file_imagin_external_service_v1_comment_proto_depIdxs = []int32{
	4, // 0: imagin.external.service.v1.GetCommentResponse.comment:type_name -> imagin.external.message.v1.Comment
	5, // 1: imagin.external.service.v1.GetCommentRawResponse.raw:type_name -> imagin.external.message.v1.CommentRaw
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_imagin_external_service_v1_comment_proto_init() }
func file_imagin_external_service_v1_comment_proto_init() {
	if File_imagin_external_service_v1_comment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_imagin_external_service_v1_comment_proto_rawDesc), len(file_imagin_external_service_v1_comment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_imagin_external_service_v1_comment_proto_goTypes,
		DependencyIndexes: file_imagin_external_service_v1_comment_proto_depIdxs,
		MessageInfos:      file_imagin_external_service_v1_comment_proto_msgTypes,
	}.Build()
	File_imagin_external_service_v1_comment_proto = out.File
	file_imagin_external_service_v1_comment_proto_goTypes = nil
	file_imagin_external_service_v1_comment_proto_depIdxs = nil
}
