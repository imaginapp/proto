// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: imagin/external/service/v1/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImaginService_GetVersion_FullMethodName            = "/imagin.external.service.v1.ImaginService/GetVersion"
	ImaginService_CreateFileWithStream_FullMethodName  = "/imagin.external.service.v1.ImaginService/CreateFileWithStream"
	ImaginService_GetFileWithStream_FullMethodName     = "/imagin.external.service.v1.ImaginService/GetFileWithStream"
	ImaginService_CreateFile_FullMethodName            = "/imagin.external.service.v1.ImaginService/CreateFile"
	ImaginService_GetFile_FullMethodName               = "/imagin.external.service.v1.ImaginService/GetFile"
	ImaginService_CreateDag_FullMethodName             = "/imagin.external.service.v1.ImaginService/CreateDag"
	ImaginService_GetDag_FullMethodName                = "/imagin.external.service.v1.ImaginService/GetDag"
	ImaginService_ListDags_FullMethodName              = "/imagin.external.service.v1.ImaginService/ListDags"
	ImaginService_GetContentFile_FullMethodName        = "/imagin.external.service.v1.ImaginService/GetContentFile"
	ImaginService_GetMe_FullMethodName                 = "/imagin.external.service.v1.ImaginService/GetMe"
	ImaginService_GetAccount_FullMethodName            = "/imagin.external.service.v1.ImaginService/GetAccount"
	ImaginService_GetAccountData_FullMethodName        = "/imagin.external.service.v1.ImaginService/GetAccountData"
	ImaginService_GetProfile_FullMethodName            = "/imagin.external.service.v1.ImaginService/GetProfile"
	ImaginService_GetProfileRaw_FullMethodName         = "/imagin.external.service.v1.ImaginService/GetProfileRaw"
	ImaginService_EnsureProfile_FullMethodName         = "/imagin.external.service.v1.ImaginService/EnsureProfile"
	ImaginService_GetPost_FullMethodName               = "/imagin.external.service.v1.ImaginService/GetPost"
	ImaginService_GetPostRaw_FullMethodName            = "/imagin.external.service.v1.ImaginService/GetPostRaw"
	ImaginService_GetComment_FullMethodName            = "/imagin.external.service.v1.ImaginService/GetComment"
	ImaginService_GetCommentRaw_FullMethodName         = "/imagin.external.service.v1.ImaginService/GetCommentRaw"
	ImaginService_ListInviteCodes_FullMethodName       = "/imagin.external.service.v1.ImaginService/ListInviteCodes"
	ImaginService_GetRegistrationPolicy_FullMethodName = "/imagin.external.service.v1.ImaginService/GetRegistrationPolicy"
	ImaginService_ValidateInviteCode_FullMethodName    = "/imagin.external.service.v1.ImaginService/ValidateInviteCode"
	ImaginService_CreateAccount_FullMethodName         = "/imagin.external.service.v1.ImaginService/CreateAccount"
	ImaginService_VerifyPurchase_FullMethodName        = "/imagin.external.service.v1.ImaginService/VerifyPurchase"
	ImaginService_GetPurchase_FullMethodName           = "/imagin.external.service.v1.ImaginService/GetPurchase"
	ImaginService_CreateReport_FullMethodName          = "/imagin.external.service.v1.ImaginService/CreateReport"
)

// ImaginServiceClient is the client API for ImaginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImaginServiceClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// Content operations
	CreateFileWithStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateFileWithStreamRequest, CreateFileWithStreamResponse], error)
	GetFileWithStream(ctx context.Context, in *GetFileWithStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileWithStreamResponse], error)
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	CreateDag(ctx context.Context, in *CreateDagRequest, opts ...grpc.CallOption) (*CreateDagResponse, error)
	GetDag(ctx context.Context, in *GetDagRequest, opts ...grpc.CallOption) (*GetDagResponse, error)
	ListDags(ctx context.Context, in *ListDagsRequest, opts ...grpc.CallOption) (*ListDagsResponse, error)
	GetContentFile(ctx context.Context, in *GetContentFileRequest, opts ...grpc.CallOption) (*GetContentFileResponse, error)
	// Account operations
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	GetAccountData(ctx context.Context, in *GetAccountDataRequest, opts ...grpc.CallOption) (*GetAccountDataResponse, error)
	// Profile operations
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	GetProfileRaw(ctx context.Context, in *GetProfileRawRequest, opts ...grpc.CallOption) (*GetProfileRawResponse, error)
	EnsureProfile(ctx context.Context, in *EnsureProfileRequest, opts ...grpc.CallOption) (*EnsureProfileResponse, error)
	// Post operations
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	GetPostRaw(ctx context.Context, in *GetPostRawRequest, opts ...grpc.CallOption) (*GetPostRawResponse, error)
	// Comment operations
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
	GetCommentRaw(ctx context.Context, in *GetCommentRawRequest, opts ...grpc.CallOption) (*GetCommentRawResponse, error)
	// Invite operations
	ListInviteCodes(ctx context.Context, in *ListInviteCodesRequest, opts ...grpc.CallOption) (*ListInviteCodesResponse, error)
	// Registration operations
	GetRegistrationPolicy(ctx context.Context, in *GetRegistrationPolicyRequest, opts ...grpc.CallOption) (*GetRegistrationPolicyResponse, error)
	ValidateInviteCode(ctx context.Context, in *ValidateInviteCodeRequest, opts ...grpc.CallOption) (*ValidateInviteCodeResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// Purchase operations
	VerifyPurchase(ctx context.Context, in *VerifyPurchaseRequest, opts ...grpc.CallOption) (*VerifyPurchaseResponse, error)
	GetPurchase(ctx context.Context, in *GetPurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseResponse, error)
	// Report operations
	CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
}

type imaginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImaginServiceClient(cc grpc.ClientConnInterface) ImaginServiceClient {
	return &imaginServiceClient{cc}
}

func (c *imaginServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) CreateFileWithStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateFileWithStreamRequest, CreateFileWithStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImaginService_ServiceDesc.Streams[0], ImaginService_CreateFileWithStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateFileWithStreamRequest, CreateFileWithStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImaginService_CreateFileWithStreamClient = grpc.ClientStreamingClient[CreateFileWithStreamRequest, CreateFileWithStreamResponse]

func (c *imaginServiceClient) GetFileWithStream(ctx context.Context, in *GetFileWithStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileWithStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImaginService_ServiceDesc.Streams[1], ImaginService_GetFileWithStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileWithStreamRequest, GetFileWithStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImaginService_GetFileWithStreamClient = grpc.ServerStreamingClient[GetFileWithStreamResponse]

func (c *imaginServiceClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, ImaginService_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) CreateDag(ctx context.Context, in *CreateDagRequest, opts ...grpc.CallOption) (*CreateDagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDagResponse)
	err := c.cc.Invoke(ctx, ImaginService_CreateDag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetDag(ctx context.Context, in *GetDagRequest, opts ...grpc.CallOption) (*GetDagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDagResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetDag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) ListDags(ctx context.Context, in *ListDagsRequest, opts ...grpc.CallOption) (*ListDagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDagsResponse)
	err := c.cc.Invoke(ctx, ImaginService_ListDags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetContentFile(ctx context.Context, in *GetContentFileRequest, opts ...grpc.CallOption) (*GetContentFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContentFileResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetContentFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetAccountData(ctx context.Context, in *GetAccountDataRequest, opts ...grpc.CallOption) (*GetAccountDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountDataResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetAccountData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetProfileRaw(ctx context.Context, in *GetProfileRawRequest, opts ...grpc.CallOption) (*GetProfileRawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileRawResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetProfileRaw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) EnsureProfile(ctx context.Context, in *EnsureProfileRequest, opts ...grpc.CallOption) (*EnsureProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnsureProfileResponse)
	err := c.cc.Invoke(ctx, ImaginService_EnsureProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetPostRaw(ctx context.Context, in *GetPostRawRequest, opts ...grpc.CallOption) (*GetPostRawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostRawResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetPostRaw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetCommentRaw(ctx context.Context, in *GetCommentRawRequest, opts ...grpc.CallOption) (*GetCommentRawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentRawResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetCommentRaw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) ListInviteCodes(ctx context.Context, in *ListInviteCodesRequest, opts ...grpc.CallOption) (*ListInviteCodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInviteCodesResponse)
	err := c.cc.Invoke(ctx, ImaginService_ListInviteCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetRegistrationPolicy(ctx context.Context, in *GetRegistrationPolicyRequest, opts ...grpc.CallOption) (*GetRegistrationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegistrationPolicyResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetRegistrationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) ValidateInviteCode(ctx context.Context, in *ValidateInviteCodeRequest, opts ...grpc.CallOption) (*ValidateInviteCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateInviteCodeResponse)
	err := c.cc.Invoke(ctx, ImaginService_ValidateInviteCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, ImaginService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) VerifyPurchase(ctx context.Context, in *VerifyPurchaseRequest, opts ...grpc.CallOption) (*VerifyPurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyPurchaseResponse)
	err := c.cc.Invoke(ctx, ImaginService_VerifyPurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) GetPurchase(ctx context.Context, in *GetPurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPurchaseResponse)
	err := c.cc.Invoke(ctx, ImaginService_GetPurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginServiceClient) CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, ImaginService_CreateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImaginServiceServer is the server API for ImaginService service.
// All implementations must embed UnimplementedImaginServiceServer
// for forward compatibility.
type ImaginServiceServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// Content operations
	CreateFileWithStream(grpc.ClientStreamingServer[CreateFileWithStreamRequest, CreateFileWithStreamResponse]) error
	GetFileWithStream(*GetFileWithStreamRequest, grpc.ServerStreamingServer[GetFileWithStreamResponse]) error
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	CreateDag(context.Context, *CreateDagRequest) (*CreateDagResponse, error)
	GetDag(context.Context, *GetDagRequest) (*GetDagResponse, error)
	ListDags(context.Context, *ListDagsRequest) (*ListDagsResponse, error)
	GetContentFile(context.Context, *GetContentFileRequest) (*GetContentFileResponse, error)
	// Account operations
	GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	GetAccountData(context.Context, *GetAccountDataRequest) (*GetAccountDataResponse, error)
	// Profile operations
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	GetProfileRaw(context.Context, *GetProfileRawRequest) (*GetProfileRawResponse, error)
	EnsureProfile(context.Context, *EnsureProfileRequest) (*EnsureProfileResponse, error)
	// Post operations
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	GetPostRaw(context.Context, *GetPostRawRequest) (*GetPostRawResponse, error)
	// Comment operations
	GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
	GetCommentRaw(context.Context, *GetCommentRawRequest) (*GetCommentRawResponse, error)
	// Invite operations
	ListInviteCodes(context.Context, *ListInviteCodesRequest) (*ListInviteCodesResponse, error)
	// Registration operations
	GetRegistrationPolicy(context.Context, *GetRegistrationPolicyRequest) (*GetRegistrationPolicyResponse, error)
	ValidateInviteCode(context.Context, *ValidateInviteCodeRequest) (*ValidateInviteCodeResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// Purchase operations
	VerifyPurchase(context.Context, *VerifyPurchaseRequest) (*VerifyPurchaseResponse, error)
	GetPurchase(context.Context, *GetPurchaseRequest) (*GetPurchaseResponse, error)
	// Report operations
	CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error)
	mustEmbedUnimplementedImaginServiceServer()
}

// UnimplementedImaginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImaginServiceServer struct{}

func (UnimplementedImaginServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedImaginServiceServer) CreateFileWithStream(grpc.ClientStreamingServer[CreateFileWithStreamRequest, CreateFileWithStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateFileWithStream not implemented")
}
func (UnimplementedImaginServiceServer) GetFileWithStream(*GetFileWithStreamRequest, grpc.ServerStreamingServer[GetFileWithStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFileWithStream not implemented")
}
func (UnimplementedImaginServiceServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedImaginServiceServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedImaginServiceServer) CreateDag(context.Context, *CreateDagRequest) (*CreateDagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDag not implemented")
}
func (UnimplementedImaginServiceServer) GetDag(context.Context, *GetDagRequest) (*GetDagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDag not implemented")
}
func (UnimplementedImaginServiceServer) ListDags(context.Context, *ListDagsRequest) (*ListDagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDags not implemented")
}
func (UnimplementedImaginServiceServer) GetContentFile(context.Context, *GetContentFileRequest) (*GetContentFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentFile not implemented")
}
func (UnimplementedImaginServiceServer) GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedImaginServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedImaginServiceServer) GetAccountData(context.Context, *GetAccountDataRequest) (*GetAccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountData not implemented")
}
func (UnimplementedImaginServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedImaginServiceServer) GetProfileRaw(context.Context, *GetProfileRawRequest) (*GetProfileRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileRaw not implemented")
}
func (UnimplementedImaginServiceServer) EnsureProfile(context.Context, *EnsureProfileRequest) (*EnsureProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureProfile not implemented")
}
func (UnimplementedImaginServiceServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedImaginServiceServer) GetPostRaw(context.Context, *GetPostRawRequest) (*GetPostRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostRaw not implemented")
}
func (UnimplementedImaginServiceServer) GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedImaginServiceServer) GetCommentRaw(context.Context, *GetCommentRawRequest) (*GetCommentRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentRaw not implemented")
}
func (UnimplementedImaginServiceServer) ListInviteCodes(context.Context, *ListInviteCodesRequest) (*ListInviteCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInviteCodes not implemented")
}
func (UnimplementedImaginServiceServer) GetRegistrationPolicy(context.Context, *GetRegistrationPolicyRequest) (*GetRegistrationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistrationPolicy not implemented")
}
func (UnimplementedImaginServiceServer) ValidateInviteCode(context.Context, *ValidateInviteCodeRequest) (*ValidateInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInviteCode not implemented")
}
func (UnimplementedImaginServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedImaginServiceServer) VerifyPurchase(context.Context, *VerifyPurchaseRequest) (*VerifyPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPurchase not implemented")
}
func (UnimplementedImaginServiceServer) GetPurchase(context.Context, *GetPurchaseRequest) (*GetPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchase not implemented")
}
func (UnimplementedImaginServiceServer) CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (UnimplementedImaginServiceServer) mustEmbedUnimplementedImaginServiceServer() {}
func (UnimplementedImaginServiceServer) testEmbeddedByValue()                       {}

// UnsafeImaginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImaginServiceServer will
// result in compilation errors.
type UnsafeImaginServiceServer interface {
	mustEmbedUnimplementedImaginServiceServer()
}

func RegisterImaginServiceServer(s grpc.ServiceRegistrar, srv ImaginServiceServer) {
	// If the following call pancis, it indicates UnimplementedImaginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImaginService_ServiceDesc, srv)
}

func _ImaginService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_CreateFileWithStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImaginServiceServer).CreateFileWithStream(&grpc.GenericServerStream[CreateFileWithStreamRequest, CreateFileWithStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImaginService_CreateFileWithStreamServer = grpc.ClientStreamingServer[CreateFileWithStreamRequest, CreateFileWithStreamResponse]

func _ImaginService_GetFileWithStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileWithStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImaginServiceServer).GetFileWithStream(m, &grpc.GenericServerStream[GetFileWithStreamRequest, GetFileWithStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImaginService_GetFileWithStreamServer = grpc.ServerStreamingServer[GetFileWithStreamResponse]

func _ImaginService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_CreateDag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).CreateDag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_CreateDag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).CreateDag(ctx, req.(*CreateDagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetDag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetDag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetDag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetDag(ctx, req.(*GetDagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_ListDags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).ListDags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_ListDags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).ListDags(ctx, req.(*ListDagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetContentFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetContentFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetContentFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetContentFile(ctx, req.(*GetContentFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetAccountData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetAccountData(ctx, req.(*GetAccountDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetProfileRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetProfileRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetProfileRaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetProfileRaw(ctx, req.(*GetProfileRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_EnsureProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).EnsureProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_EnsureProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).EnsureProfile(ctx, req.(*EnsureProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetPostRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetPostRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetPostRaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetPostRaw(ctx, req.(*GetPostRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetCommentRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetCommentRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetCommentRaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetCommentRaw(ctx, req.(*GetCommentRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_ListInviteCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInviteCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).ListInviteCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_ListInviteCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).ListInviteCodes(ctx, req.(*ListInviteCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetRegistrationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetRegistrationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetRegistrationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetRegistrationPolicy(ctx, req.(*GetRegistrationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_ValidateInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).ValidateInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_ValidateInviteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).ValidateInviteCode(ctx, req.(*ValidateInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_VerifyPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).VerifyPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_VerifyPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).VerifyPurchase(ctx, req.(*VerifyPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_GetPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).GetPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_GetPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).GetPurchase(ctx, req.(*GetPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImaginService_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginServiceServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImaginService_CreateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginServiceServer).CreateReport(ctx, req.(*CreateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImaginService_ServiceDesc is the grpc.ServiceDesc for ImaginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImaginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imagin.external.service.v1.ImaginService",
	HandlerType: (*ImaginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _ImaginService_GetVersion_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _ImaginService_CreateFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _ImaginService_GetFile_Handler,
		},
		{
			MethodName: "CreateDag",
			Handler:    _ImaginService_CreateDag_Handler,
		},
		{
			MethodName: "GetDag",
			Handler:    _ImaginService_GetDag_Handler,
		},
		{
			MethodName: "ListDags",
			Handler:    _ImaginService_ListDags_Handler,
		},
		{
			MethodName: "GetContentFile",
			Handler:    _ImaginService_GetContentFile_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _ImaginService_GetMe_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ImaginService_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountData",
			Handler:    _ImaginService_GetAccountData_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ImaginService_GetProfile_Handler,
		},
		{
			MethodName: "GetProfileRaw",
			Handler:    _ImaginService_GetProfileRaw_Handler,
		},
		{
			MethodName: "EnsureProfile",
			Handler:    _ImaginService_EnsureProfile_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _ImaginService_GetPost_Handler,
		},
		{
			MethodName: "GetPostRaw",
			Handler:    _ImaginService_GetPostRaw_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _ImaginService_GetComment_Handler,
		},
		{
			MethodName: "GetCommentRaw",
			Handler:    _ImaginService_GetCommentRaw_Handler,
		},
		{
			MethodName: "ListInviteCodes",
			Handler:    _ImaginService_ListInviteCodes_Handler,
		},
		{
			MethodName: "GetRegistrationPolicy",
			Handler:    _ImaginService_GetRegistrationPolicy_Handler,
		},
		{
			MethodName: "ValidateInviteCode",
			Handler:    _ImaginService_ValidateInviteCode_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _ImaginService_CreateAccount_Handler,
		},
		{
			MethodName: "VerifyPurchase",
			Handler:    _ImaginService_VerifyPurchase_Handler,
		},
		{
			MethodName: "GetPurchase",
			Handler:    _ImaginService_GetPurchase_Handler,
		},
		{
			MethodName: "CreateReport",
			Handler:    _ImaginService_CreateReport_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFileWithStream",
			Handler:       _ImaginService_CreateFileWithStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFileWithStream",
			Handler:       _ImaginService_GetFileWithStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "imagin/external/service/v1/service.proto",
}
