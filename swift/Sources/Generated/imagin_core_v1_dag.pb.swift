// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: imagin/core/v1/dag.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The type of the dag
public enum Imagin_Core_V1_DagType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case profile // = 1
  case post // = 2
  case comment // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .profile
    case 2: self = .post
    case 3: self = .comment
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .profile: return 1
    case .post: return 2
    case .comment: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Imagin_Core_V1_DagType] = [
    .unspecified,
    .profile,
    .post,
    .comment,
  ]

}

/// a dag item
public struct Imagin_Core_V1_Dag: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var schemaVersion: Int32 = 0

  public var cid: String = String()

  public var createdTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdTime = newValue}
  }
  /// Returns true if `createdTime` has been explicitly set.
  public var hasCreatedTime: Bool {return self._createdTime != nil}
  /// Clears the value of `createdTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedTime() {self._createdTime = nil}

  public var dagType: Imagin_Core_V1_DagType = .unspecified

  public var root: String = String()

  public var prev: String = String()

  public var data: String = String()

  public var signature: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Imagin_Core_V1_Dags: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var dags: [Imagin_Core_V1_Dag] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "imagin.core.v1"

extension Imagin_Core_V1_DagType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DAG_TYPE_UNSPECIFIED"),
    1: .same(proto: "DAG_TYPE_PROFILE"),
    2: .same(proto: "DAG_TYPE_POST"),
    3: .same(proto: "DAG_TYPE_COMMENT"),
  ]
}

extension Imagin_Core_V1_Dag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dag"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "schema_version"),
    2: .same(proto: "cid"),
    3: .standard(proto: "created_time"),
    4: .standard(proto: "dag_type"),
    5: .same(proto: "root"),
    6: .same(proto: "prev"),
    7: .same(proto: "data"),
    8: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.schemaVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createdTime) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.dagType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.root) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.prev) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.schemaVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.schemaVersion, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    try { if let v = self._createdTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.dagType != .unspecified {
      try visitor.visitSingularEnumField(value: self.dagType, fieldNumber: 4)
    }
    if !self.root.isEmpty {
      try visitor.visitSingularStringField(value: self.root, fieldNumber: 5)
    }
    if !self.prev.isEmpty {
      try visitor.visitSingularStringField(value: self.prev, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 7)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Imagin_Core_V1_Dag, rhs: Imagin_Core_V1_Dag) -> Bool {
    if lhs.schemaVersion != rhs.schemaVersion {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs._createdTime != rhs._createdTime {return false}
    if lhs.dagType != rhs.dagType {return false}
    if lhs.root != rhs.root {return false}
    if lhs.prev != rhs.prev {return false}
    if lhs.data != rhs.data {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Imagin_Core_V1_Dags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dags"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dags) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dags, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Imagin_Core_V1_Dags, rhs: Imagin_Core_V1_Dags) -> Bool {
    if lhs.dags != rhs.dags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
