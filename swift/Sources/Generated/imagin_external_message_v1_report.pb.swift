// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: imagin/external/message/v1/report.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Imagin_External_Message_V1_ReportType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case post // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .post
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .post: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Imagin_External_Message_V1_ReportType] = [
    .unspecified,
    .post,
  ]

}

public enum Imagin_External_Message_V1_ReportReason: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case dontLike // = 1
  case harrasment // = 2
  case spam // = 3
  case nuditySexualContent // = 4
  case hateSpeach // = 5
  case falseInformation // = 6
  case violence // = 7
  case scam // = 8
  case suicide // = 9
  case saleOfIllegalGoods // = 10
  case intellectualProperty // = 11
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .dontLike
    case 2: self = .harrasment
    case 3: self = .spam
    case 4: self = .nuditySexualContent
    case 5: self = .hateSpeach
    case 6: self = .falseInformation
    case 7: self = .violence
    case 8: self = .scam
    case 9: self = .suicide
    case 10: self = .saleOfIllegalGoods
    case 11: self = .intellectualProperty
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .dontLike: return 1
    case .harrasment: return 2
    case .spam: return 3
    case .nuditySexualContent: return 4
    case .hateSpeach: return 5
    case .falseInformation: return 6
    case .violence: return 7
    case .scam: return 8
    case .suicide: return 9
    case .saleOfIllegalGoods: return 10
    case .intellectualProperty: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Imagin_External_Message_V1_ReportReason] = [
    .unspecified,
    .dontLike,
    .harrasment,
    .spam,
    .nuditySexualContent,
    .hateSpeach,
    .falseInformation,
    .violence,
    .scam,
    .suicide,
    .saleOfIllegalGoods,
    .intellectualProperty,
  ]

}

public struct Imagin_External_Message_V1_ReportPost: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountID: String = String()

  public var postID: String = String()

  public var reason: Imagin_External_Message_V1_ReportReason = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Imagin_External_Message_V1_Report: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var reportType: Imagin_External_Message_V1_Report.OneOf_ReportType? = nil

  public var post: Imagin_External_Message_V1_ReportPost {
    get {
      if case .post(let v)? = reportType {return v}
      return Imagin_External_Message_V1_ReportPost()
    }
    set {reportType = .post(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ReportType: Equatable, Sendable {
    case post(Imagin_External_Message_V1_ReportPost)

  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "imagin.external.message.v1"

extension Imagin_External_Message_V1_ReportType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REPORT_TYPE_UNSPECIFIED"),
    1: .same(proto: "REPORT_TYPE_POST"),
  ]
}

extension Imagin_External_Message_V1_ReportReason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REPORT_REASON_UNSPECIFIED"),
    1: .same(proto: "REPORT_REASON_DONT_LIKE"),
    2: .same(proto: "REPORT_REASON_HARRASMENT"),
    3: .same(proto: "REPORT_REASON_SPAM"),
    4: .same(proto: "REPORT_REASON_NUDITY_SEXUAL_CONTENT"),
    5: .same(proto: "REPORT_REASON_HATE_SPEACH"),
    6: .same(proto: "REPORT_REASON_FALSE_INFORMATION"),
    7: .same(proto: "REPORT_REASON_VIOLENCE"),
    8: .same(proto: "REPORT_REASON_SCAM"),
    9: .same(proto: "REPORT_REASON_SUICIDE"),
    10: .same(proto: "REPORT_REASON_SALE_OF_ILLEGAL_GOODS"),
    11: .same(proto: "REPORT_REASON_INTELLECTUAL_PROPERTY"),
  ]
}

extension Imagin_External_Message_V1_ReportPost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportPost"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "post_id"),
    3: .same(proto: "reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.postID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 2)
    }
    if self.reason != .unspecified {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Imagin_External_Message_V1_ReportPost, rhs: Imagin_External_Message_V1_ReportPost) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.postID != rhs.postID {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Imagin_External_Message_V1_Report: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Report"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "post"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Imagin_External_Message_V1_ReportPost?
        var hadOneofValue = false
        if let current = self.reportType {
          hadOneofValue = true
          if case .post(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.reportType = .post(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .post(let v)? = self.reportType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Imagin_External_Message_V1_Report, rhs: Imagin_External_Message_V1_Report) -> Bool {
    if lhs.reportType != rhs.reportType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
