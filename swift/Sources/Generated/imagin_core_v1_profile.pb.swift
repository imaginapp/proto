// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: imagin/core/v1/profile.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Imagin_Core_V1_ProfileData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var schemaVersion: Int32 {
    get {return _storage._schemaVersion}
    set {_uniqueStorage()._schemaVersion = newValue}
  }

  public var cid: String {
    get {return _storage._cid}
    set {_uniqueStorage()._cid = newValue}
  }

  public var createdTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdTime = newValue}
  }
  /// Returns true if `createdTime` has been explicitly set.
  public var hasCreatedTime: Bool {return _storage._createdTime != nil}
  /// Clears the value of `createdTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedTime() {_uniqueStorage()._createdTime = nil}

  public var avatar: Imagin_Core_V1_ContentData {
    get {return _storage._avatar ?? Imagin_Core_V1_ContentData()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  public var background: Imagin_Core_V1_ContentData {
    get {return _storage._background ?? Imagin_Core_V1_ContentData()}
    set {_uniqueStorage()._background = newValue}
  }
  /// Returns true if `background` has been explicitly set.
  public var hasBackground: Bool {return _storage._background != nil}
  /// Clears the value of `background`. Subsequent reads from it will return its default value.
  public mutating func clearBackground() {_uniqueStorage()._background = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var website: String {
    get {return _storage._website}
    set {_uniqueStorage()._website = newValue}
  }

  public var about: String {
    get {return _storage._about}
    set {_uniqueStorage()._about = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "imagin.core.v1"

extension Imagin_Core_V1_ProfileData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProfileData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "schema_version"),
    2: .same(proto: "cid"),
    3: .standard(proto: "created_time"),
    4: .same(proto: "avatar"),
    5: .same(proto: "background"),
    6: .same(proto: "name"),
    7: .same(proto: "website"),
    8: .same(proto: "about"),
  ]

  fileprivate class _StorageClass {
    var _schemaVersion: Int32 = 0
    var _cid: String = String()
    var _createdTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _avatar: Imagin_Core_V1_ContentData? = nil
    var _background: Imagin_Core_V1_ContentData? = nil
    var _name: String = String()
    var _website: String = String()
    var _about: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _schemaVersion = source._schemaVersion
      _cid = source._cid
      _createdTime = source._createdTime
      _avatar = source._avatar
      _background = source._background
      _name = source._name
      _website = source._website
      _about = source._about
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._schemaVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._cid) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._createdTime) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._background) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._website) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._about) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._schemaVersion != 0 {
        try visitor.visitSingularInt32Field(value: _storage._schemaVersion, fieldNumber: 1)
      }
      if !_storage._cid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cid, fieldNumber: 2)
      }
      try { if let v = _storage._createdTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._background {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 6)
      }
      if !_storage._website.isEmpty {
        try visitor.visitSingularStringField(value: _storage._website, fieldNumber: 7)
      }
      if !_storage._about.isEmpty {
        try visitor.visitSingularStringField(value: _storage._about, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Imagin_Core_V1_ProfileData, rhs: Imagin_Core_V1_ProfileData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._schemaVersion != rhs_storage._schemaVersion {return false}
        if _storage._cid != rhs_storage._cid {return false}
        if _storage._createdTime != rhs_storage._createdTime {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._background != rhs_storage._background {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._website != rhs_storage._website {return false}
        if _storage._about != rhs_storage._about {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
