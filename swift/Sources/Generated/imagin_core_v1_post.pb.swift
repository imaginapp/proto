// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: imagin/core/v1/post.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Imagin_Core_V1_PostData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var schemaVersion: Int32 = 0

  public var cid: String = String()

  public var createdTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdTime = newValue}
  }
  /// Returns true if `createdTime` has been explicitly set.
  public var hasCreatedTime: Bool {return self._createdTime != nil}
  /// Clears the value of `createdTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedTime() {self._createdTime = nil}

  public var content: [Imagin_Core_V1_ContentData] = []

  public var message: String = String()

  public var metadata: Imagin_Core_V1_Metadata {
    get {return _metadata ?? Imagin_Core_V1_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _metadata: Imagin_Core_V1_Metadata? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "imagin.core.v1"

extension Imagin_Core_V1_PostData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "schema_version"),
    2: .same(proto: "cid"),
    3: .standard(proto: "created_time"),
    4: .same(proto: "content"),
    5: .same(proto: "message"),
    6: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.schemaVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createdTime) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.content) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.schemaVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.schemaVersion, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    try { if let v = self._createdTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.content.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.content, fieldNumber: 4)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 5)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Imagin_Core_V1_PostData, rhs: Imagin_Core_V1_PostData) -> Bool {
    if lhs.schemaVersion != rhs.schemaVersion {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs._createdTime != rhs._createdTime {return false}
    if lhs.content != rhs.content {return false}
    if lhs.message != rhs.message {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
